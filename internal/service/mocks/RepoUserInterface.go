// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	domain "avito-shop/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "avito-shop/internal/model"
)

// RepoUserInterface is an autogenerated mock type for the RepoUserInterface type
type RepoUserInterface struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, userID, item
func (_m *RepoUserInterface) BuyItem(ctx context.Context, userID int, item domain.Item) error {
	ret := _m.Called(ctx, userID, item)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.Item) error); ok {
		r0 = rf(ctx, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCoinHistory provides a mock function with given fields: ctx, userID, currentUsername
func (_m *RepoUserInterface) GetCoinHistory(ctx context.Context, userID int, currentUsername string) (model.CoinHistoryDTO, error) {
	ret := _m.Called(ctx, userID, currentUsername)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinHistory")
	}

	var r0 model.CoinHistoryDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (model.CoinHistoryDTO, error)); ok {
		return rf(ctx, userID, currentUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) model.CoinHistoryDTO); ok {
		r0 = rf(ctx, userID, currentUsername)
	} else {
		r0 = ret.Get(0).(model.CoinHistoryDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, currentUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, itemName
func (_m *RepoUserInterface) GetItem(ctx context.Context, itemName string) (domain.Item, error) {
	ret := _m.Called(ctx, itemName)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 domain.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Item, error)); ok {
		return rf(ctx, itemName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Item); ok {
		r0 = rf(ctx, itemName)
	} else {
		r0 = ret.Get(0).(domain.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, itemName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPurchasedItems provides a mock function with given fields: ctx, userID
func (_m *RepoUserInterface) GetPurchasedItems(ctx context.Context, userID int) ([]model.ItemDTO, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPurchasedItems")
	}

	var r0 []model.ItemDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.ItemDTO, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.ItemDTO); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ItemDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *RepoUserInterface) GetUser(ctx context.Context, userID int) (domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByName provides a mock function with given fields: ctx, toUser
func (_m *RepoUserInterface) GetUserByName(ctx context.Context, toUser string) (int, error) {
	ret := _m.Called(ctx, toUser)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, toUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, toUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, toUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoins provides a mock function with given fields: ctx, fromUserID, toUserID, amount
func (_m *RepoUserInterface) SendCoins(ctx context.Context, fromUserID int, toUserID int, amount int) error {
	ret := _m.Called(ctx, fromUserID, toUserID, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, fromUserID, toUserID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepoUserInterface creates a new instance of RepoUserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoUserInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoUserInterface {
	mock := &RepoUserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

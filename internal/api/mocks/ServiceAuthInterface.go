// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	model "avito-shop/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceAuthInterface is an autogenerated mock type for the ServiceAuthInterface type
type ServiceAuthInterface struct {
	mock.Mock
}

// Authorization provides a mock function with given fields: ctx, dto
func (_m *ServiceAuthInterface) Authorization(ctx context.Context, dto model.AuthRequestDTO) (string, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Authorization")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthRequestDTO) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthRequestDTO) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.AuthRequestDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJwtToken provides a mock function with given fields: userId
func (_m *ServiceAuthInterface) GenerateJwtToken(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJwtToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceAuthInterface creates a new instance of ServiceAuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAuthInterface {
	mock := &ServiceAuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
